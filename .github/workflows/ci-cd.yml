name: VAST Project - Real CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Continuous Integration (Testing)
  continuous-integration:
    runs-on: ubuntu-latest
    name: 🧪 CI - Test & Validate
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'
    
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: 🔍 Code Quality Check
      run: |
        echo "🔍 Running code quality checks..."
        python ci_cd_simulation.py
    
    - name: ✅ Django System Check
      run: |
        echo "✅ Validating Django configuration..."
        python manage.py check --settings=vast_project.settings_prod
    
    - name: 📊 CI Results
      run: |
        echo "## 🎉 Continuous Integration Results" >> $GITHUB_STEP_SUMMARY
        echo "✅ Code Quality: PASSED" >> $GITHUB_STEP_SUMMARY
        echo "✅ Django Config: VALIDATED" >> $GITHUB_STEP_SUMMARY
        echo "✅ Dependencies: VERIFIED" >> $GITHUB_STEP_SUMMARY
        echo "🚀 Ready for build and deployment!" >> $GITHUB_STEP_SUMMARY

  # Job 2: Build Docker Image
  build-container:
    needs: continuous-integration
    runs-on: ubuntu-latest
    name: 🐳 Build Docker Container
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
    
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: 🔑 Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: 🏗️ Build and Push Docker Image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: 📦 Container Build Results
      run: |
        echo "## 🐳 Container Build Results" >> $GITHUB_STEP_SUMMARY
        echo "✅ Docker Image: Built Successfully" >> $GITHUB_STEP_SUMMARY
        echo "📦 Registry: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
        echo "🏷️ Tag: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY

  # Job 3: Continuous Deployment (Railway.app)
  continuous-deployment:
    needs: build-container
    runs-on: ubuntu-latest
    name: 🚀 CD - Deploy to Production
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 🚀 Trigger Railway Deployment
      run: |
        echo "🚀 DEPLOYING TO PRODUCTION..."
        echo "Railway.app will automatically deploy from this push!"
        echo ""
        echo "## 🌐 Deployment Status" >> $GITHUB_STEP_SUMMARY
        echo "🚀 Status: Deployment Triggered" >> $GITHUB_STEP_SUMMARY
        echo "🌐 Platform: Railway.app" >> $GITHUB_STEP_SUMMARY
        echo "🔗 Live URL: Will be available shortly" >> $GITHUB_STEP_SUMMARY
        echo "📊 This is REAL Continuous Deployment!" >> $GITHUB_STEP_SUMMARY

  # Job 4: Notification
  notify-completion:
    needs: [continuous-integration, build-container, continuous-deployment]
    runs-on: ubuntu-latest
    name: 📬 Pipeline Complete
    if: always()
    
    steps:
    - name: 🎉 Success Notification
      if: ${{ needs.continuous-deployment.result == 'success' }}
      run: |
        echo "🎉 VAST PROJECT CI/CD PIPELINE COMPLETED!"
        echo "✅ Continuous Integration: PASSED"
        echo "✅ Container Build: SUCCESSFUL"
        echo "✅ Continuous Deployment: TRIGGERED"
        echo ""
        echo "🌐 Your application is being deployed to production!"
        echo "📊 This is a complete CI/CD automation pipeline!"
    
    - name: ❌ Failure Notification
      if: ${{ needs.continuous-deployment.result != 'success' }}
      run: |
        echo "❌ CI/CD Pipeline encountered issues"
        echo "Please check the failed jobs for details"
